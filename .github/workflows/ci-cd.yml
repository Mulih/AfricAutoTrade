name: CI/CD Pipeline

on:
  push:
    branches: [ develop, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ALPHA_VANTAGE_KEY: ${{ secrets.ALPHA_VANTAGE_KEY }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.3

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          source .venv/bin/activate
          pip intall flake8
          flake8 .

      - name: Run tests with pytest
        run: |
          source .venv/bin/activate
          pip install pytest
          pytest

      - name: Build Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t AfricAutoTrade_bot: latest .

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push AfricAutoTrade_bot: latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to AWS ECS
        uses: aws-actions/amazozn-ecs-deploy-task-definition@v1
        with:
          task-definition: path/to/task-def.json
          service: your-ecs-service
          cluster: your-ecs-cluster
          aws-access-key-id: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: your-aws-region